Sqlite Database setup (goes from top to bottom):
    Tokenizer
    Parser
    Code Generator
    Vitual Machine
    B-Tree
    Pager
    OS Interface

The input to the front-end is an SQL query, and the output to the front end is sqlit virtual machien bytecode (i.e. a compile program that can operate on the database)

Front-end:
    Tokenizer
    Parser
    Code Generator

Back-end:
    Virtual Machine
    B-Tree
    Pager
    Os Interface

Virtual Machine: takes bytecode generated by front-end, and uses it as instructions. It then performs the operation on one or more tables or indexes, each of which 
    is stored in the B-tree datastructure. Supposedly a big switch statement on the type of bytecode instruction.

B-tree: consists o many nodes, with each node being one page in lngth. The B-tree can retrieve a page from disk or save it back to disk by issuing commands to the pager.

Pager: receives commands to read or wite pages of data. This part is responsible for reading/writing at "offsets" in database file. Also keeps a cace of reently-acessed pages in memory
    and determines when those pages need to be written to disk.

Os Interface: layer that differs depending on which operating system sqlite was compiled for (in this case a webapp built using django)

